name: Ko Release

on: 
  workflow_dispatch:
    inputs:
      registry:
        type: choice
        description: Registry
        options: 
        - docker.io
        - ghcr.io
  push:
    tags:
      - "*" 

permissions: read-all

env:
  DOCKER_REGISTRY: docker.io
  GITHUB_REGISTRY: ghcr.io

jobs:
  build-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      PLATFORMS: "linux/amd64,linux/arm64,linux/386,linux/arm"
      TAGS: tag1,tag2,tag3
      # Note: "." works to in this simple case
      GIHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
      USERNAME: laurentsimon
      PROJECT: laurentsimon/helloworld
    outputs:
      docker-image: ${{ steps.docker.outputs.docker-image }}
      github-image: ${{ steps.github.outputs.github-image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
       # Note: downlaoading and pinning the download seems better
       # than adding this dependency. Need to look how the install works
       # remko/dsadmin/blob/7a6939179bc56b1be28cada040f2b4a148e3e14a/.github/workflows/publish-release.yml
      - name: Setup Ko
        uses: imjasonh/setup-ko@v0.4
    
      - name: docker
        id: docker
        if: ${{ github.event.inputs.registry == env.DOCKER_REGISTRY}}
        run: |
          set -euo pipefail
          
          echo ko login "${{ env.DOCKER_REGISTRY }}" -u "$USERNAME" -p "$DOCKER_TOKEN"
          ko login "${{ env.DOCKER_REGISTRY }}" -u "$USERNAME" -p "$DOCKER_TOKEN"
          
          # Note: this will be done in Go via an exec and to set up env variables.
          # Note 2: we will use a dry-run to generate the command for provenance in a separate job.
          export KO_DOCKER_REPO="${{ env.DOCKER_REGISTRY }}/$USERNAME"
          DOCKER_IMAGE=$(ko publish -B --platform "$PLATFORMS" --tags "$TAGS" "$PROJECT")
          
          echo "::set-output name=docker-image::$DOCKER_IMAGE"
      
      - name: github
        id: github
        if: ${{ github.event.inputs.registry == env.GITHUB_REGISTRY}}
        run: |
          set -euo pipefail
          
          echo ko login "${{ env.GITHUB_REGISTRY }}" -u "$USERNAME" -p "$GIHUB_TOKEN"
          ko login "${{ env.GITHUB_REGISTRY }}" -u "$USERNAME" -p "$GIHUB_TOKEN"
          
          echo ko publish -B --platform "$PLATFORMS" --tags "$TAGS" "$PROJECT"
          
          # Note: this will be done in Go via an exec and to set up env variables.
          # Note 2: we will use a dry-run to generate the command for provenance in a separate job.
          GITHUB_IMAGE=$(ko publish -B --platform "$PLATFORMS" --tags "$TAGS" "$PROJECT")
          
          echo "github-image is $GITHUB_IMAGE"
          
          echo "::set-output name=github-image::$GITHUB_IMAGE"
  
  provenance:
    runs-on: ubuntu-latest
    needs: build-release
    permissions:
      packages: write
      contents: read
      id-token: write
    env:
      UNTRUSTED_DOCKER_IMAGE: "${{ needs.build-release.outputs.docker-image }}"
      UNTRUSTED_GITHUB_IMAGE: "${{ needs.build-release.outputs.github-image }}"
      GIHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
      USERNAME: laurentsimon
      PROJECT: laurentsimon/helloworld
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Generate predicate
        id: gen-predicate
        run: |
          set -euo pipefail
            
          CONTAINER_IMAGE=""
  
          if [[ ! -z "$UNTRUSTED_DOCKER_IMAGE" ]]; then
            echo "docker-image: $UNTRUSTED_DOCKER_IMAGE"
            CONTAINER_IMAGE="$UNTRUSTED_DOCKER_IMAGE"
          elif [[ ! -z "$UNTRUSTED_GITHUB_IMAGE" ]]; then
            echo "github-image: $UNTRUSTED_GITHUB_IMAGE"
            CONTAINER_IMAGE="$UNTRUSTED_GITHUB_IMAGE"
          else
            echo "no container image found"
            exit 2
          fi
          
          echo "image is: $CONTAINER_IMAGE"
          
          echo "TODO: generate provenance dynamically"
          
          
          #TODO: generate PROJECT dynamically using the URL
          # testing. Use a local file containing provenance.
          CONTAINER_SHA256=$(echo $CONTAINER_IMAGE | cut -d "@" -f2 | cut -d ":" -f2)
          CONTAINER_PROVENANCE="predicate-sha256-$CONTAINER_SHA256.json"
          
          echo "provenance is: $CONTAINER_PROVENANCE"
          
          export DATA="ewogICJidWlsZGVyIjogewogICAgImlkIjogImh0dHBzOi8vZ2l0aHViLmNvbS9zbHNhLWZyYW1ld29yay9zbHNhLWdpdGh1Yi1nZW5lcmF0b3ItZ28vLmdpdGh1Yi93b3JrZmxvd3MvYnVpbGRlci55bWxAcmVmcy9oZWFkcy9tYWluIgogIH0sCiAgImJ1aWxkVHlwZSI6ICJodHRwczovL2dpdGh1Yi5jb20vc2xzYS1mcmFtZXdvcmsvc2xzYS1naXRodWItZ2VuZXJhdG9yLWdvQHYxIiwKICAiaW52b2NhdGlvbiI6IHsKICAgICJjb25maWdTb3VyY2UiOiB7CiAgICAgICJ1cmkiOiAiZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbWxhdXJlbnRzaW1vbi9zbHNhLW9uLWdpdGh1Yi10ZXN0QHJlZnMvaGVhZHMvbWFpbi5naXQiLAogICAgICAiZGlnZXN0IjogewogICAgICAgICJzaGExIjogImQzZmQ5NDgyZTY4ZDI3NmU2OWMwYThiM2Y3ZWFhYmIzYjllNTY2OTUiCiAgICAgIH0sCiAgICAgICJlbnRyeVBvaW50IjogIlNMU0EgUmVsZWFzZSIKICAgIH0sCiAgICAicGFyYW1ldGVycyI6IHsKICAgICAgInZlcnNpb24iOiAxLAogICAgICAicmVmX3R5cGUiOiAiYnJhbmNoIiwKICAgICAgInJlZiI6ICJyZWZzL2hlYWRzL21haW4iLAogICAgICAiYmFzZV9yZWYiOiAiIiwKICAgICAgImhlYWRfcmVmIjogIiIsCiAgICAgICJhY3RvciI6ICJsYXVyZW50c2ltb24iLAogICAgICAic2hhMSI6ICJkM2ZkOTQ4MmU2OGQyNzZlNjljMGE4YjNmN2VhYWJiM2I5ZTU2Njk1IgogICAgfSwKICAgICJlbnZpcm9ubWVudCI6IHsKICAgICAgImFyY2giOiAiYW1kNjQiLAogICAgICAiZ2l0aHViX2V2ZW50X25hbWUiOiAid29ya2Zsb3dfZGlzcGF0Y2giLAogICAgICAiZ2l0aHViX3J1bl9hdHRlbXB0IjogIjEiLAogICAgICAiZ2l0aHViX3J1bl9pZCI6ICIyMDkwODQxMjYzIiwKICAgICAgImdpdGh1Yl9ydW5fbnVtYmVyIjogIjE4IiwKICAgICAgIm9zIjogInVidW50dSIKICAgIH0KICB9LAogICJidWlsZENvbmZpZyI6IHsKICAgICJ2ZXJzaW9uIjogMSwKICAgICJzdGVwcyI6IFsKICAgICAgewogICAgICAgICJjb21tYW5kIjogWwogICAgICAgICAgIi9vcHQvaG9zdGVkdG9vbGNhY2hlL2dvLzEuMTcuOC94NjQvYmluL2dvIiwKICAgICAgICAgICJidWlsZCIsCiAgICAgICAgICAiLW1vZD12ZW5kb3IiLAogICAgICAgICAgIi10cmltcGF0aCIsCiAgICAgICAgICAiLXRhZ3M9bmV0Z28iLAogICAgICAgICAgIi1vIiwKICAgICAgICAgICJiaW5hcnktbGludXgtYW1kNjQiCiAgICAgICAgXSwKICAgICAgICAiZW52IjogWwogICAgICAgICAgIkdPT1M9bGludXgiLAogICAgICAgICAgIkdPQVJDSD1hbWQ2NCIsCiAgICAgICAgICAiR08xMTFNT0RVTEU9b24iLAogICAgICAgICAgIkNHT19FTkFCTEVEPTAiCiAgICAgICAgXQogICAgICB9CiAgICBdCiAgfSwKICAibWF0ZXJpYWxzIjogWwogICAgewogICAgICAidXJpIjogImdpdCtsYXVyZW50c2ltb24vc2xzYS1vbi1naXRodWItdGVzdC5naXQiLAogICAgICAiZGlnZXN0IjogewogICAgICAgICJzaGExIjogImQzZmQ5NDgyZTY4ZDI3NmU2OWMwYThiM2Y3ZWFhYmIzYjllNTY2OTUiCiAgICAgIH0KICAgIH0KICBdCn0="
          #echo "TODO: upload artifact"
          PROVENANCE_DATA=$(echo -n "$DATA" | base64 -d)
          echo -n "$PROVENANCE_DATA" > "$CONTAINER_PROVENANCE"
          
          echo "::set-output name=filename::$CONTAINER_PROVENANCE"
          echo "::set-output name=image::$CONTAINER_IMAGE"
          
      # We may be able to have a generic provenance uploader, but for now let's seperate to keep things simple.
      #TODO: can pull a static image and verify provenance
        
#       - name: Fetch OIDC token
#         run: |
#           set -euo pipefail
          
#           status_code=$(curl -sS -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sigstore" -o jwt.json -w '%{http_code}')
#           if [[ $status_code -ge 400 ]]; then
#               error_msg=$(jq -r .message jwt.json 2>/dev/null || echo 'unknown error')
#               echo "Failed to get OIDC token from GitHub, response $status_code: $error_msg"
#               exit 1;
#           fi

       # TODO: downlaoading and pinning the download instead
      # remko/dsadmin/blob/7a6939179bc56b1be28cada040f2b4a148e3e14a/.github/workflows/publish-release.yml
      # TODO: here we may use each ecosystem's login action instead.
#       - name: Setup Ko
#         uses: imjasonh/setup-ko@v0.4

      # Note: here we need packages permissions
      # TODO: here we may use each ecosystem's login action instead,
      # or use cosign login
      - uses: sigstore/cosign-installer@d6a3abf1bdea83574e28d40543793018b6035605
      - name: Login github
        if: ${{ github.event.inputs.registry == env.GITHUB_REGISTRY}}
        run: |
          set -euo pipefail
          
          # verify logs
          #echo "$GIHUB_TOKEN" | docker login "${{ env.GITHUB_REGISTRY }}" -u "$USERNAME" --password-stdin
          
          #ko login "${{ env.GITHUB_REGISTRY }}" -u "$USERNAME" -p "$GIHUB_TOKEN"
          cosign login "${{ env.GITHUB_REGISTRY }}" -u "$USERNAME" -p "$GIHUB_TOKEN"
                  
      - name: Login docker
        if: ${{ github.event.inputs.registry == env.DOCKER_REGISTRY}}
        run: |
          set -euo pipefail
          
          # verify logs
          #ko login "${{ env.DOCKER_REGISTRY }}" -u "$USERNAME" -p "$DOCKER_TOKEN"
          cosign login "${{ env.DOCKER_REGISTRY }}" -u "$USERNAME" -p "$DOCKER_TOKEN"
      
      #- uses: sigstore/cosign-installer@d6a3abf1bdea83574e28d40543793018b6035605
      - name: Upload
        env:
          UNTRUSTED_PREDICATE_FILE: "${{ steps.gen-predicate.outputs.filename }}"
          UNTRUSTED_CONTAINER_IMAGE: "${{ steps.gen-predicate.outputs.image }}"
        run: |
          set -euo pipefail
            
          # Note: --force uploads to rekor
          # This MUST be an option (??)
          # "ghcr.io/laurentsimon/slsa-on-github-test/helloworld" appears to be a private repository, please confirm uploading to the transparency log at "https://rekor.sigstore.dev" [Y/N]: 
          # WARNING: skipping transparency log upload (use --force to upload from scripts)
                    
          #export JWT=$(cat jwt.json | jq -r '.value')
          #if [ -z $JWT ]; then
          #  echo "OIDC token parsing failure: value could not be retrieved"
          #  exit 1;
          #fi
          
          #echo -n "$JWT" | base64 --wrap=0
          # --identity-token "$JWT"
          
          # --oidc-client-secret-file jwt.json
          echo cosign attest --predicate "$UNTRUSTED_PREDICATE_FILE" \
            --type "slsaprovenance" \
            --force \
            "$UNTRUSTED_CONTAINER_IMAGE"
            
          #--identity-token "$JWT" \
          COSIGN_EXPERIMENTAL=1 cosign attest --predicate "$UNTRUSTED_PREDICATE_FILE" \
            --type "slsaprovenance" \
             --force \
            "$UNTRUSTED_CONTAINER_IMAGE"

          
         
